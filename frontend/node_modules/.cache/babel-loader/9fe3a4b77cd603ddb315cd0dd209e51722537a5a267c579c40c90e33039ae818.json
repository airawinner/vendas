{"ast":null,"code":"// src/API.js\nimport axios from 'axios';\nconst apiUrl = 'http://localhost:3000'; // Atualize com o endpoint correto\n\n// Função para fazer o login do usuário\nexport const loginUser = async (email, password) => {\n  try {\n    console.log('Enviando requisição para login com:', email, password);\n    const response = await fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao fazer login');\n    }\n    const data = await response.json();\n    console.log('Resposta do servidor:', data);\n    return data;\n  } catch (error) {\n    console.error('Erro na requisição:', error);\n    throw error;\n  }\n};\n\n// Função para cadastrar um novo usuário\nexport const registerUser = async (name, email, password) => {\n  try {\n    const response = await axios.post(`${apiUrl}/cadastro`, {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao cadastrar usuário:\", error);\n    throw error;\n  }\n};\n\n// Função para enviar pedido de redefinição de senha\nexport const forgotPassword = async email => {\n  try {\n    const response = await axios.post(`${apiUrl}/esqueceu-senha`, {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao solicitar redefinição de senha:\", error);\n    throw error;\n  }\n};\n\n// Função para pesquisar cursos\nexport const searchCourses = async query => {\n  try {\n    const response = await axios.get(`${apiUrl}/search-course`, {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao pesquisar cursos:\", error);\n    throw error;\n  }\n};\n\n// Função para adicionar curso (somente admin)\nexport const addCourse = async (courseData, userData) => {\n  try {\n    const response = await axios.post(`${apiUrl}/add-course`, {\n      courseData,\n      userData\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao adicionar curso:\", error);\n    throw error;\n  }\n};\nexport const removeCourse = async (courseId, userData) => {\n  try {\n    const response = await axios.delete(`${apiUrl}/remove-course/${courseId}`, {\n      data: {\n        userData\n      },\n      // Enviando userData para verificação de permissões\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userData.token}` // Supondo que o admin tenha um token de autenticação\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao remover curso:\", error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n// Função para pesquisar cursos\nexport const viewPurchaseDetails = async query => {\n  try {\n    const response = await axios.get(`${apiUrl}/view-purchase-details`, {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao pesquisar cursos:\", error);\n    throw error;\n  }\n};\n\n// Função para registrar uma compra\nexport const registerPurchase = async course => {\n  try {\n    const purchaseData = {\n      id: course.id,\n      name: course.name,\n      description: course.description,\n      price: course.price,\n      image: course.image,\n      date: new Date().toLocaleDateString('pt-BR') // Formato xx/xx/xxxx\n    };\n    alert('Dados sendo passados');\n    const response = await axios.post(`${apiUrl}/purchases`, purchaseData);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao registrar compra:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","apiUrl","loginUser","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","registerUser","name","post","forgotPassword","searchCourses","query","get","params","addCourse","courseData","userData","removeCourse","courseId","delete","Authorization","token","message","viewPurchaseDetails","registerPurchase","course","purchaseData","id","description","price","image","date","Date","toLocaleDateString","alert"],"sources":["C:/Users/airaw/Documents/venda-cursos/frontend/src/API.js"],"sourcesContent":["// src/API.js\r\nimport axios from 'axios';\r\n\r\nconst apiUrl = 'http://localhost:3000';  // Atualize com o endpoint correto\r\n\r\n// Função para fazer o login do usuário\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    console.log('Enviando requisição para login com:', email, password);\r\n    const response = await fetch('http://localhost:3000/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao fazer login');\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Resposta do servidor:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Erro na requisição:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Função para cadastrar um novo usuário\r\nexport const registerUser = async (name, email, password) => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/cadastro`, { name, email, password });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao cadastrar usuário:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para enviar pedido de redefinição de senha\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/esqueceu-senha`, { email });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao solicitar redefinição de senha:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para pesquisar cursos\r\nexport const searchCourses = async (query) => {\r\n  try {\r\n    const response = await axios.get(`${apiUrl}/search-course`, { params: { query } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao pesquisar cursos:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Função para adicionar curso (somente admin)\r\nexport const addCourse = async (courseData, userData) => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/add-course`, { courseData, userData });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao adicionar curso:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeCourse = async (courseId, userData) => {\r\n  try {\r\n    const response = await axios.delete(`${apiUrl}/remove-course/${courseId}`, {\r\n      data: { userData }, // Enviando userData para verificação de permissões\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userData.token}` // Supondo que o admin tenha um token de autenticação\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao remover curso:\", error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n// Função para pesquisar cursos\r\nexport const viewPurchaseDetails = async (query) => {\r\n  try {\r\n    const response = await axios.get(`${apiUrl}/view-purchase-details`, { params: { query } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao pesquisar cursos:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n// Função para registrar uma compra\r\nexport const registerPurchase = async (course) => {\r\n  try {\r\n    const purchaseData = {\r\n      id: course.id,\r\n      name: course.name,\r\n      description: course.description,\r\n      price: course.price,\r\n      image: course.image,\r\n      date: new Date().toLocaleDateString('pt-BR') // Formato xx/xx/xxxx\r\n    };\r\n\r\n    alert('Dados sendo passados');\r\n    \r\n    const response = await axios.post(`${apiUrl}/purchases`, purchaseData);\r\n  \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao registrar compra:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}